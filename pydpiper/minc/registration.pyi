# Stubs for pydpiper.minc.registration (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Sequence

from pydpiper.core.stages import Result
from pydpiper.core.files  import FileAtom
from pydpiper.minc.files  import MincAtom, XfmAtom
from pydpiper.minc.containers import XfmHandler

def mincblur(img : MincAtom, fwhm : float, gradient : bool = ..., subdir : str = ...) -> Result[MincAtom]: ...

def mincresample_simple(img  : MincAtom, xfm : XfmAtom, like : MincAtom, extra_flags : Sequence[str] = ...,
                        new_name_wo_ext : str = None, subdir : str =None) -> Result[MincAtom]: ...
def mincresample(img  : MincAtom,
                 xfm  : XfmAtom,
                 like : MincAtom,
                 extra_flags : Sequence[str] = ...,
                 new_name_wo_ext : str = None,
                 subdir : str = None) -> Result[MincAtom]: ...

def xfmconcat(xfms : Sequence[XfmAtom], name : str = None) -> Result[XfmAtom]: ...
def concat(ts : Sequence[XfmHandler], name : str = None, extra_flags : Sequence[str] = ...) -> Result[XfmHandler]: ...

def nu_estimate(src : MincAtom) -> Result[MincAtom]: ...
def nu_evaluate(img : MincAtom, field : FileAtom) -> Result[MincAtom]: ...
def nu_correct(src  : MincAtom) -> Result[MincAtom]: ...

INormalizeConf = ... # type: Any
default_inormalize_conf = ... # type: INormalizeConf

def inormalize(src : MincAtom, conf : INormalizeConf) -> Result[MincAtom]: ...

RotationalMinctraccConf = ... # type: Any
default_rotational_minctracc_conf = ... # type: RotationalMinctraccConf

def get_rotational_minctracc_conf(resolution, rotation_params=None, rotation_range=None, rotation_interval=None, rotation_tmp_dir=None, subject_matter=None): ...
def rotational_minctracc(source          : MincAtom,
                         target          : MincAtom,
                         conf            : RotationalMinctraccConf,
                         resolution      : float,
                         mask            : MincAtom = None,
                         resample_source : bool     = False) -> Result[XfmHandler]: ...

R3 = ...                     # type: Any
MinctraccConf = ...          # type: MinctraccConf
LinearMinctraccConf = ...    # type: MinctraccConf
NonlinearMinctraccConf = ... # type: MinctraccConf 

def default_linear_minctracc_conf(transform_type): ...

default_lsq6_minctracc_conf  = ... # type: Any
default_lsq12_minctracc_conf = ... # type: Any
step_size = ... # type: Any
step_sizes = ... # type: Any
default_nonlinear_minctracc_conf = ... # type: Any

def space_sep(x): ...
def minctracc(source : MincAtom,
              target : MincAtom,
              conf   : MinctraccConf,
              transform : XfmAtom = None,
              transform_name_wo_ext : str = None,
              generation : int = None,
              resample_source : bool = False) -> Result[XfmHandler]: ...

SimilarityMetricConf = ... # type: Any
default_similarity_metric_conf = ... # type: Any
MincANTSConf = ... # type: Any
mincANTS_default_conf = ... # type: Any

def mincANTS(source : MincAtom,
             target : MincAtom,
             conf   : MincANTSConf,
             transform_name_wo_ext : str = ...,
             generation            : int = ...,
             resample_source       : bool = ...) -> Result[XfmHandler]: ...
def mincANTS_NLIN_build_model(imgs, initial_target, nlin_dir, confs): ...
def LSQ12_NLIN(source : MincAtom, target : MincAtom, conf) -> Result[XfmHandler]: ...
def intrasubject_registrations(subj, conf): ...
def multilevel_minctracc(source, target, conf, curr_dir, transform=None): ...
def multilevel_pairwise_minctracc(imgs, conf, transforms=None, like=None, curr_dir=''): ...

MultilevelMinctraccConf = ... # type: Any
LSQ12_default_conf = ... # type: Any

def lsq12_pairwise(imgs, conf, lsq12_dir, like=None): ...
def lsq12_pairwise_on_dictionaries(imgs, conf, lsq12_dir, like=None): ...
def mincaverage(imgs, name_wo_ext='', output_dir='', copy_header_from_first_input=False): ...
def xfmaverage(xfms : Sequence[XfmAtom], output_dir : str) -> Result[XfmAtom]: ...
def xfminvert(xfm : XfmAtom) -> Result[XfmAtom]: ...
def invert(xfm : XfmHandler) -> Result[XfmHandler]: ...
def can_read_MINC_file(filename : str) -> bool: ...
def check_MINC_input_files(args): ...
def get_parameters_for_rotational_minctracc(resolution, rotation_tmp_dir=None, rotation_range=None, rotation_interval=None, rotation_params=None): ...
def lsq6(imgs   : Sequence[MincAtom],
         target : Sequence[MincAtom],
         lsq6_method       : str,
         resolution        : float,
         rotation_tmp_dir  : str = None,
         rotation_range    : float = None,
         rotation_interval : float = None,
         rotation_params           = None) -> Result[Sequence[MincAtom]]: ...
def lsq6_nuc_inorm(imgs, registration_targets, lsq6_method, resolution, rotation_tmp_dir=None, rotation_range=None, rotation_interval=None, rotation_params=None): ...

RegistrationTargets = ... # type: Any

def get_registration_targets_from_init_model(init_model_standard_file, output_dir, pipeline_name): ...
def verify_correct_lsq6_target_options(init_model, lsq6_target, bootstrap): ...
def get_registration_targets(init_model, lsq6_target, bootstrap, output_dir, pipeline_name, first_input_file=None): ...
def get_resolution_from_file(input_file): ...
